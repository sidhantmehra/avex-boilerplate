const CartJS = window.CartJS;
const selectors = {
	form: '#productForm',
	variantSelectId: 'variant-select',
	productOptionSelect: '.product-option-select'
}

const productJSON = JSON.parse(document.getElementById('product-json').innerHTML);
new Shopify.OptionSelectors(selectors.variantSelectId, { product: productJSON, onVariantSelected: selectCallback, enableHistoryState: true });


/**
 * Function that runs on each variant change
 *
 * @param {*} variant
 */
function selectCallback(variant){
  console.log(variant)
}


/**
 * Function that serializes a form and returns an object with key: value pairs for each form field
 *
 * @param {*} form - HTMLFormElement
 * @returns
 */
function serializeForm(form) {
	var obj = {};
	var formData = new FormData(form);
	for (var key of formData.keys()) {
		obj[key] = formData.get(key);
	}
	return obj;
}

const productForm = document.querySelector(selectors.form)
productForm.addEventListener('submit', function(e){
	e.preventDefault()
	const formData = serializeForm(this)
	console.log(formData);
	CartJS.addItem(formData.id, formData.quantity, {}, {
		success: (data, textStatus)=>{
			console.log('Added to cart: ', data, textStatus)
		},
		error: (jqXHR, textStatus, errorThrown)=> {
			console.log('Error in adding to cart: ', errorThrown)
		}
	})
})


/**
 Listen to change events in the form option selectors, when changed, trigger change event in the select generated by Shopify.OptionSelectors
 */
Array.from(document.querySelectorAll(selectors.productOptionSelect)).map((el)=>{
	el.addEventListener('change', function(e) {
		const formData = serializeForm(productForm)
		const optionSelection = Object.keys(formData).map(v => /^option/.test(v) && formData[v]).filter(el=>el)
		const optionIndex = e.target.getAttribute('name')

		const curVariant = productJSON.variants.find(variant=>JSON.stringify(variant.options)===JSON.stringify(optionSelection))

		const variantSelect = document.querySelector(`.single-option-selector[data-option=${optionIndex}]`)
		variantSelect.value = curVariant[optionIndex]
		variantSelect.dispatchEvent(new Event("change"))
	})
})



/**
CUSTOM SWATCH CODE
**/

	//if you need to change any content on custom swatch click, add the selectors for such content here
const pdpSelectors = {
	product_image_container: '.main.product .product__gallery.product-gallery',
	product_image: '.main.product .product__gallery .product-gallery__item',
	product_thumbnail_container: '.main.product .product__thumbnail.product-thumbnail',
	product_thumbnail: '.main.product .product__thumbnail .product-thumbnail__item',
	product_description: '.main.product .product__details .product__description',
	product_title: '.main.product .product__details .product__title',
	product_vendor: '.main.product .product__details .product__vendor',
	product_price: '.main.product .product__price .current-price',
	product_compare_price: '.main.product .product__price .compare-at-price',
	hidden_variant_select: '.main.product #variant-select',
	//use liquid filename for product sections, separated by commas (max 5)
	product_sections: 'product-swatch-section-1,product-swatch-section-2'
}

const customSwatches = document.querySelectorAll('.custom-swatch');

/**
PUT ALL CONTENT UPDATES ON SWATCH CLICK IN THIS FUNCTION
**/
const updateSwatchContent = (swatchJSON) => {

	//product title
	document.querySelector(pdpSelectors.product_title).innerHTML = swatchJSON.title;

	//product description
	document.querySelector(pdpSelectors.product_description).innerHTML = swatchJSON.description;

	//product vendor
	document.querySelector(pdpSelectors.product_vendor).innerHTML = swatchJSON.vendor;

	//product images
	const swatchImageTemplate = document.querySelector(pdpSelectors.product_image).cloneNode(true);
	let newSwatchImagesHTML = '';
	//console.log(swatchJSON);
	[].forEach.call(swatchJSON.media, (product_image) =>{
		let imageBlock = swatchImageTemplate;
		imageBlock.querySelector('img').setAttribute('src', product_image.src);
		imageBlock.querySelector('img').setAttribute('data-src', product_image.src);
		imageBlock.querySelector('img').setAttribute('alt', swatchJSON.title);
		newSwatchImagesHTML += imageBlock.outerHTML;
	});
	document.querySelector(pdpSelectors.product_image_container).innerHTML = newSwatchImagesHTML;


	//product thumbnails
	const swatchThumbnailTemplate = document.querySelector(pdpSelectors.product_thumbnail).cloneNode(true);
	let newThumbnailImagesHTML = '';
	[].forEach.call(swatchJSON.media, (product_image) =>{
		let imageBlock = swatchThumbnailTemplate;
		imageBlock.querySelector('img').setAttribute('src', product_image.src);
		imageBlock.querySelector('img').setAttribute('data-src', product_image.src);
		imageBlock.querySelector('img').setAttribute('alt', swatchJSON.title);
		newThumbnailImagesHTML += imageBlock.outerHTML;
	});
	document.querySelector(pdpSelectors.product_thumbnail_container).innerHTML = newThumbnailImagesHTML;
		//put any thumbnail refresh code here if needed

	//product ID update
	let variantSelectHTML = '';
	let vOpt1 = document.querySelector('.main.product #variant-select-option-0').value;
	let vOpt2 = document.querySelector('.main.product #variant-select-option-1').value;
	let vOpt3 = document.querySelector('.main.product #variant-select-option-2').value;
	[].forEach.call(swatchJSON.variants, (variant) => {

		let selectedVariant = '';
		if(vOpt1){
			if(vOpt2){
				if(vOpt3){
					//if all vars are equal
					if(vOpt1 == variant.option1 && vOpt2 == variant.option2 && vOpt3 == variant.option3){
						if(variant.available){
							selectedVariant = "selected='selected'";
						}
					}
				} else{
					//if vopt1 and vopt2 == varopt1 and varopt2
					if(vOpt1 == variant.option1 && vOpt2 == variant.option2){
						if(variant.available){
							selectedVariant = "selected='selected'";
						}
					}
				}
			}else{
				//if vopt1 == varopt1
				if(vOpt1 == variant.option1){
					if(variant.available){
						selectedVariant = "selected='selected'";
					}
				}
			}
		}
		variantSelectHTML += `<option value="${variant.id}" ${selectedVariant}>${variant.title}</option>`;

		//product prices
		if(selectedVariant != ''){
			document.querySelector(pdpSelectors.product_price).innerHTML = Shopify.formatMoney(variant.price);
			document.querySelector(pdpSelectors.product_compare_price).innerHTML = Shopify.formatMoney(variant.compare_at_price);
		}


	});
	document.querySelector(pdpSelectors.hidden_variant_select).innerHTML = variantSelectHTML;

	//product specific sections
	fetch(`/products/${swatchJSON.handle}?sections=${pdpSelectors.product_sections}`)
	.then( res => res.json())
	.then( out => {
		for(let productSection in out){
			document.querySelector(`#shopify-section-${productSection}`).outerHTML = out[productSection];
			//console.log(productSection);
			//console.log(out[productSection]);
		}
	});
	window.history.pushState(null,null, swatchJSON.url);
}

//**EVENT LISTENER FOR SWATCH CLICK**/
[].forEach.call( customSwatches, (customSwatch) => {
	customSwatch.addEventListener("click", (e) => {
		if(document.querySelector('.custom-swatch.active')){
			document.querySelector('.custom-swatch.active').classList.remove('active');
		}
		customSwatch.classList.add('active');
		fetch(customSwatch.getAttribute('data-href'))
		.then(res => res.json())
		.then(out => updateSwatchContent(out));
	});
	customSwatch.addEventListener("touchstart", (e) => {
		if(document.querySelector('.custom-swatch.active')){
			document.querySelector('.custom-swatch.active').classList.remove('active');
		}
		customSwatch.classList.add('active');
		fetch(customSwatch.getAttribute('data-href'))
		.then(res => res.json())
		.then(out => updateSwatchContent(out));
	});
});


//**BACK BUTTON LOGIC**//
window.addEventListener('popstate', function(event) {
    // The popstate event is fired each time when the current history entry changes.
		if(window.location.pathname.indexOf('/products/') != -1){
			let productHandle = window.location.pathname.replace('/products/', '');
			let triggerSwatch = document.querySelector(`.custom-swatch[data-handle="${productHandle}"]`);
			if(triggerSwatch){
				triggerSwatch.click();
			}
		}

}, false);
